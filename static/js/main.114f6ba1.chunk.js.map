{"version":3,"sources":["images/header_background.jpg","Components/CasesByCountryTable.js","Helpers/Formatter.js","Components/GeneralCasesRightSide.js","Components/GeneralCasesChart.js","Components/PaperOptions.js","Components/GeneralCases.js","Components/GeneralStatsCountries.js","Components/CountriesCasesMap.js","Pages/Home.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","columns","id","label","minWidth","align","format","value","timestamp","hours","minutes","seconds","Date","now","Math","floor","parseInt","prettyDate","CasesByCountryTable","countriesTotal","useState","rows","setRows","page","setPage","rowsPerPage","setRowsPerPage","searchCountry","setSearchCountery","useEffect","customRows","map","item","push","Country","className","country","countryInfo","iso2","Avatar","alt","src","flag","TodayCases","todayCases","TodayDeaths","todayDeaths","TotalCases","cases","TotalDeaths","deaths","TotalRecovered","recovered","LastUpdate","updated","handleCountriesData","Paper","component","InputBase","onChange","e","target","placeholder","inputProps","IconButton","type","aria-label","onSubmit","preventDefault","length","TableContainer","Table","stickyHeader","TableHead","TableRow","column","TableCell","key","style","TableBody","filter","props","children","toLowerCase","indexOf","slice","row","hover","role","tabIndex","code","random","height","TablePagination","rowsPerPageOptions","count","onChangePage","event","newPage","onChangeRowsPerPage","GeneralCasesRightSide","generalCases","handleToggle","allowedGeneralCasesChartKeys","allowedGeneralCasesKeys","checked","List","labelId","ListItem","undefined","dense","button","includes","onClick","ListItemIcon","Checkbox","edge","disableRipple","ListItemText","primary","name","ListItemSecondaryAction","GeneralCasesChart","chartData","axes","useMemo","position","lineChart","data","tooltip","PaperOptions","ID","fullPage","setFullPage","document","getElementById","replace","Grid","container","xs","color","data-tip","GeneralCases","historyCases","showFullDetails","setAllowedGeneralCasesKeys","setAllowedGeneralCasesChartKeys","setHistoryCases","setHistroyDeaths","setHistroyRecovered","setChartData","setChecked","affectedCountries","toString","x","spacing","currentIndex","newChecked","splice","renderCountry","option","snapshot","borderRadius","verticalAlign","marginRight","width","photo","GeneralStatsCountries","setGeneralCases","API","setShowFullDetails","setCountry","countries","setCountries","generalStats","setGeneralStats","countriesD","console","log","cn","i","axios","get","HISTORY_CASES","HISTORY_CASES_COUNTRY","then","r","timeline","catch","md","options","renderOption","search","FormControlLabel","control","geoUrl","require","colorScale","scaleLinear","domain","range","memo","setTooltipContent","projectionConfig","scale","geography","geographies","geo","properties","NAME","ISO_A2","ISO_A3","iso3","rsmKey","onMouseEnter","tests","active","critical","casesPerOneMillion","deathsPerOneMillion","testsPerOneMillion","onMouseLeave","stroke","fill","outline","pressed","Home","setCountriesTotal","mapToolTipContent","setMapTooltipContent","getCountriesData","GENERAL_CASES","COUNTRIES_TOTAL","unshift","v","ee","setInterval","waitTime","loadingProgress","LinearProgress","background","header_background","backgroundSize","Container","maxWidth","Footer","Favorite","href","rel","App","config","basename","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.114f6ba1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header_background.2b4471cd.jpg\";","import React, {useState, useEffect} from 'react'\r\nimport {Table,TableBody, TableCell, TableContainer, TableHead, \r\n    TablePagination, TableRow, Paper, Avatar, InputBase, IconButton} from '@material-ui/core';\r\nimport {prettyDate} from './../Helpers/Formatter'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Skeleton from 'react-loading-skeleton';\r\n\r\n\r\nconst columns = [\r\n    { \r\n        id: 'Country', \r\n        label: 'Country', \r\n        minWidth: 170 ,\r\n        // format : (value) => {\r\n        //     return(\r\n\r\n        //     )\r\n        // }\r\n    },\r\n    // { id: 'code', label: 'ISO\\u00a0Code', minWidth: 100 },\r\n    {\r\n        id: 'TodayCases',\r\n        label: 'Today Cases',\r\n        // minWidth: 170,\r\n        align: 'left',\r\n        //   format: (value) => value.toLocaleString(),\r\n    },\r\n    {\r\n        id: 'TodayDeaths',\r\n        label: 'Today Deaths',\r\n        // minWidth: 170,\r\n        align: 'left',\r\n        //   format: (value) => value.toLocaleString(),\r\n    },\r\n    {\r\n        id: 'TotalCases',\r\n        label: 'Total Cases',\r\n        // minWidth: 170,\r\n        align: 'left',\r\n        //   format: (value) => value.toLocaleString(),\r\n    },\r\n    {\r\n        id: 'TotalDeaths',\r\n        label: 'Total Deaths',\r\n        // minWidth: 170,\r\n        align: 'left',\r\n        //   format: (value) => value.toLocaleString(),\r\n    },\r\n    {\r\n        id: 'TotalRecovered',\r\n        label: 'Total Recovered',\r\n        // minWidth: 170,\r\n        align: 'left',\r\n        //   format: (value) => value.toLocaleString(),\r\n    },\r\n    {\r\n        id: 'LastUpdate',\r\n        label: 'Last Update',\r\n        // minWidth: 170,\r\n        align: 'left',\r\n        format: (value) => 'Since ' + prettyDate(value),\r\n    },\r\n\r\n];\r\n\r\n\r\n\r\nconst CasesByCountryTable = ({countriesTotal}) => {\r\n    // const[countriesTotal, setCountriesTotal] = useState([]);\r\n    const [rows, setRows] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] =useState(10);\r\n    const [searchCountry, setSearchCountery] = useState('');\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n      setPage(newPage);\r\n    };\r\n  \r\n    const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(+event.target.value);\r\n      setPage(0);\r\n    };\r\n\r\n    const handleCountriesData = () => {\r\n        let customRows = [];\r\n        countriesTotal.map(item => {\r\n            customRows.push({\r\n                Country : (\r\n                    <div className=\"country-image-container\">\r\n                        <span>{item.country} [{item.countryInfo.iso2}] </span> <Avatar alt={item.country} src={item.countryInfo.flag} />\r\n                    </div>\r\n                ),               \r\n                TodayCases : item.todayCases,\r\n                TodayDeaths : item.todayDeaths,\r\n                TotalCases : item.cases,\r\n                TotalDeaths : item.deaths,\r\n                TotalRecovered : item.recovered,\r\n                LastUpdate : item.updated,\r\n            });\r\n\r\n            return item;\r\n        });\r\n\r\n        setRows(customRows);\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleCountriesData();\r\n    }, [countriesTotal]);\r\n\r\n    const searchCountries = e => {\r\n        if(e){\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div id=\"CountriesCasesTable\">  \r\n            {/* <h1 className=\"text-center\">Cases Per Country</h1> */}\r\n            <Paper>\r\n                <Paper component=\"form\" className=\"searchContainer\">\r\n                    <InputBase\r\n                        value={searchCountry}\r\n                        onChange={e => setSearchCountery(e.target.value)}\r\n                        placeholder=\"Search By Country Name\"\r\n                        inputProps={{ 'aria-label': 'Search By Country Name' }}\r\n                    />\r\n                    <IconButton type=\"submit\" aria-label=\"search\">\r\n                        <SearchIcon onSubmit={searchCountries} />\r\n                    </IconButton>\r\n                </Paper>\r\n                {\r\n                    countriesTotal.length > 0 ? \r\n                        <TableContainer className=\"countries-table\">\r\n                            <Table stickyHeader aria-label=\"sticky table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                    {columns.map((column) => (\r\n                                        <TableCell\r\n                                        key={column.id}\r\n                                        align={column.align}\r\n                                        style={{ minWidth: column.minWidth }}\r\n                                        >\r\n                                        {column.label}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {rows.filter(item => {  \r\n                                        return searchCountry.length < 1 || item.Country.props.children[0].props.children[0].toLowerCase().indexOf(searchCountry.toLowerCase()) >= 0;\r\n                                    })\r\n                                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                                    return (\r\n                                        <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                        {columns.map((column) => {\r\n                                            const value = row[column.id];\r\n                                            return (\r\n                                            <TableCell key={column.id+Math.random()} align={column.align}>\r\n                                                {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                            </TableCell>\r\n                                            );\r\n                                        })}\r\n                                        </TableRow>\r\n                                    );\r\n                                    })}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    : <Skeleton height={800} />\r\n                }\r\n\r\n                <TablePagination\r\n                    rowsPerPageOptions={[10, 25, 100]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CasesByCountryTable;","export function prettyDate(timestamp){\r\n    timestamp = (Date.now() - timestamp) / 1000;\r\n    let hours;\r\n    let minutes;\r\n    let seconds;\r\n    hours = Math.floor(timestamp / 3600);\r\n    timestamp %= 3600;\r\n    minutes = Math.floor(timestamp / 60);\r\n    seconds = timestamp % 60;\r\n    return `${hours < 10 ? '0'+hours : hours}:${minutes < 10 ? '0'+minutes : minutes}:${parseInt(seconds) < 10 ? '0'+parseInt(seconds) : parseInt(seconds)}`\r\n}","import React from 'react'\r\nimport {List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, IconButton, Checkbox} from '@material-ui/core';\r\n\r\nconst GeneralCasesRightSide = ({\r\n    generalCases, handleToggle, allowedGeneralCasesChartKeys, \r\n    allowedGeneralCasesKeys, checked\r\n}) => {\r\n\r\n    return(\r\n        <List>\r\n            {allowedGeneralCasesKeys.map((value) => {\r\n                const labelId = `checkbox-list-label-${value.id}`;\r\n\r\n                return (\r\n                    <ListItem key={value.id} role={undefined} dense button={allowedGeneralCasesChartKeys.includes(value.id)} onClick={allowedGeneralCasesChartKeys.includes(value.id) ? handleToggle(value.id) : ''}>\r\n                        <ListItemIcon>\r\n                            {\r\n                                allowedGeneralCasesChartKeys.includes(value.id) ? (\r\n                                    <Checkbox\r\n                                        edge=\"start\"\r\n                                        checked={checked.indexOf(value.id) !== -1}\r\n                                        tabIndex={-1}\r\n                                        disableRipple\r\n                                        inputProps={{ 'aria-labelledby': labelId }}\r\n                                    />\r\n                                ) : ''\r\n                            }\r\n                        </ListItemIcon>\r\n                        <ListItemText id={labelId} primary={value.name} />\r\n                        <ListItemSecondaryAction>\r\n                        <IconButton edge=\"end\" aria-label=\"comments\">\r\n                            {value.format ? value.format(generalCases[value.id]) : generalCases[value.id]}\r\n                        </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                );\r\n            })}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default GeneralCasesRightSide;","import React, {useMemo} from 'react'\r\n\r\nimport { Chart } from 'react-charts'\r\n\r\nconst GeneralCasesChart = ({chartData}) => {\r\n    let axes = useMemo(() => [\r\n        { primary: true, type: 'ordinal', position: 'bottom' },\r\n        { type: 'linear', position: 'left' }\r\n    ], [])\r\n    \r\n    let lineChart = chartData.length > 0 ? (\r\n        <div className=\"homeChartContainer\">\r\n          <Chart data={chartData} axes={axes} tooltip />\r\n        </div>\r\n    ) : '';\r\n\r\n    return(\r\n        <>\r\n            {lineChart}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GeneralCasesChart;","import React, {useState, useEffect} from 'react'\r\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\r\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport CodeIcon from '@material-ui/icons/Code';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/Button';\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\n\r\nconst PaperOptions = ({ID}) => {\r\n    const [fullPage, setFullPage] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if(fullPage){\r\n            document.getElementById(ID).className += ' fullPageEnable';\r\n        }else{\r\n            document.getElementById(ID).className = document.getElementById(ID).className.replace('fullPageEnable', '');\r\n        }\r\n    }, [fullPage])\r\n\r\n    return(\r\n        <Grid container className=\"PaperOptions\">\r\n            <Grid item xs={6} className=\"share\">\r\n                <IconButton color=\"primary\" component=\"span\" data-tip=\"Share The Page In Social Medai Or Include This Component In Your Page\">\r\n                    <ShareIcon />\r\n                </IconButton>\r\n            </Grid>\r\n\r\n            <Grid item xs={6} className=\"fullPage\">\r\n                <IconButton color=\"primary\" component=\"span\" data-tip=\"View This Component In Full Page Mode\">\r\n                    {\r\n                        fullPage ? <FullscreenExitIcon onClick={() => setFullPage(false)} /> : <FullscreenIcon onClick={() => setFullPage(true)} />\r\n                    }\r\n                </IconButton>\r\n            </Grid>\r\n        </Grid >\r\n    );\r\n};\r\n\r\nexport default PaperOptions;","import React, {useState, useEffect} from 'react'\r\n\r\nimport {Paper, Grid} from '@material-ui/core';\r\n\r\nimport GeneralCasesRightSide from './GeneralCasesRightSide'\r\nimport GeneralCasesChart from './GeneralCasesChart'\r\nimport PaperOptions from './PaperOptions'\r\nimport {prettyDate} from './../Helpers/Formatter'\r\nimport Skeleton from 'react-loading-skeleton';\r\n\r\nconst GeneralCases = ({generalCases, historyCases, showFullDetails}) => {\r\n    // allowed keys\r\n    const [allowedGeneralCasesKeys, setAllowedGeneralCasesKeys] = useState([]);\r\n    const [allowedGeneralCasesChartKeys, setAllowedGeneralCasesChartKeys] = useState([]);\r\n\r\n    // chart parts\r\n    const [histroyCasesChart , setHistoryCases] = useState([]);\r\n    const [histroyDeathsChart , setHistroyDeaths] = useState([]);\r\n    const [histroyRecoveredChart , setHistroyRecovered] = useState([]);\r\n\r\n    // chart data\r\n    const [chartData, setChartData] = useState([]);\r\n\r\n\r\n    // selected keys for chart\r\n    const [checked, setChecked] = useState([]);\r\n\r\n    // handle select key\r\n    const handleToggle = (value) => () => {\r\n        const currentIndex = checked.indexOf(value);\r\n        const newChecked = [...checked];\r\n        if (currentIndex === -1) {\r\n          newChecked.push(value);\r\n        } else {\r\n          newChecked.splice(currentIndex, 1);\r\n        }\r\n        setChecked(newChecked);\r\n    };\r\n\r\n    // set allowed keys\r\n    useEffect(() => {   \r\n        if(generalCases.cases != undefined){\r\n            const allowedCasesParts = [\r\n                // {\r\n                //     id : 'updated',\r\n                //     name : 'Last Update',\r\n                //     format : (value) => 'Since '+ prettyDate(value), \r\n                // },\r\n                {\r\n                    id : 'cases',\r\n                    name : 'Cases',\r\n                    format : (value) => value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\r\n                },\r\n                {\r\n                    id : 'todayCases',\r\n                    name : 'Today Cases',\r\n                    format : (value) => value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\r\n                },\r\n                {\r\n                    id : 'deaths',\r\n                    name : 'Deaths',\r\n                    format : (value) => value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\r\n                },\r\n                {\r\n                    id : 'todayDeaths',\r\n                    name : 'Today Deaths',\r\n                    format : (value) => value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\r\n                },\r\n                {\r\n                    id : 'recovered',\r\n                    name : 'Recovered',\r\n                    format : (value) => value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\r\n                },\r\n                {\r\n                    id : 'active',\r\n                    name : 'Active',\r\n                    format : (value) => value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\r\n                },\r\n                {\r\n                    id : 'critical',\r\n                    name : 'Critical',\r\n                    format : (value) => value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\r\n                },\r\n                {\r\n                    id : 'casesPerOneMillion',\r\n                    name : 'Cases Per One Million',\r\n                    format : (value) => value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\r\n                },\r\n                {\r\n                    id : 'deathsPerOneMillion',\r\n                    name : 'Deaths Per One Million',\r\n                    format : (value) => value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\r\n                },\r\n                {\r\n                    id : 'tests',\r\n                    name : 'Tests',\r\n                    format : (value) => value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\r\n                },\r\n                {\r\n                    id : 'testsPerOneMillion',\r\n                    name : 'Tests Per One Million',\r\n                    format : (value) => value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\r\n                },\r\n            ]\r\n\r\n            if(generalCases.affectedCountries != undefined){\r\n                // allowedCasesParts.push({\r\n                //     id : 'affectedCountries',\r\n                //     name : 'Affected Countries',\r\n                //     format : (value) => value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\r\n                // });\r\n            }\r\n            setAllowedGeneralCasesKeys(allowedCasesParts);\r\n\r\n            setAllowedGeneralCasesChartKeys(['cases', 'deaths', 'recovered']);\r\n            setChecked(['cases', 'deaths', 'recovered']);\r\n        }\r\n    }, [generalCases]);\r\n    \r\n\r\n    // fix history to be chartable\r\n    useEffect(() => {\r\n        if(historyCases.cases != undefined){\r\n            let data = [];\r\n\r\n            if(checked.includes('recovered')){\r\n                let recovered = [];\r\n                for(let x in historyCases.recovered){\r\n                    recovered.push([x, historyCases.recovered[x]]);\r\n                }\r\n                setHistroyRecovered(recovered);\r\n                data.push({\r\n                    label : 'Recovered',\r\n                    color : 'green',\r\n                    data : recovered\r\n                });\r\n            }\r\n\r\n            if(checked.includes('deaths')){\r\n                let deaths = [];\r\n                for(let x in historyCases.deaths){\r\n                    deaths.push([x, historyCases.deaths[x]]);\r\n                }\r\n                setHistroyDeaths(deaths);\r\n                data.push({\r\n                    label : 'Deaths',\r\n                    color : 'red',\r\n                    data : deaths\r\n                });\r\n            }\r\n\r\n            if(checked.includes('cases')){\r\n                let cases = [];\r\n                for(let x in historyCases.cases){\r\n                    cases.push([x, historyCases.cases[x]]);\r\n                }\r\n                setHistoryCases(cases);\r\n                data.push({\r\n                    label : 'Cases',\r\n                    color : 'orange',\r\n                    data : cases\r\n                });\r\n\r\n            }\r\n\r\n            setChartData(data);\r\n        }   \r\n    }, [historyCases, checked]);\r\n\r\n\r\n    return(\r\n        <div className=\"general-cases\">\r\n            {/* <h1 className=\"text-center\">General Statics</h1> */}\r\n            <Grid container spacing={2}>\r\n                {\r\n                    showFullDetails ? \r\n                    <Grid item xs={12}>\r\n                        <Paper className=\"general-paper\">\r\n                            {\r\n                                generalCases.length < 1 ?\r\n                                <Skeleton height={49} count={10} /> \r\n                                : <GeneralCasesRightSide generalCases={generalCases} \r\n                                allowedGeneralCasesChartKeys={allowedGeneralCasesChartKeys} \r\n                                allowedGeneralCasesKeys={allowedGeneralCasesKeys}\r\n                                handleToggle={handleToggle} checked={checked} />\r\n                            }\r\n                        </Paper>\r\n                    </Grid> : ''\r\n                }\r\n\r\n                <Grid item xs={12}>\r\n                    <Paper className={'homeChartContainerParent'} id=\"HomeChartContainer\">\r\n                        <PaperOptions ID=\"HomeChartContainer\" />\r\n                        {\r\n                            generalCases.length < 1 ?\r\n                            <Skeleton height={500} /> \r\n                            : <GeneralCasesChart chartData={chartData} />\r\n                        }\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GeneralCases;","import React, { useEffect, useState } from 'react'\r\nimport SelectSearch from 'react-select-search';\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport PaperOptions from './PaperOptions'\r\nimport './../Sass/react-select-css.css'\r\nimport axios from 'axios'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nfunction renderCountry(props, option, snapshot, className) {\r\n    const imgStyle = {\r\n        borderRadius: '50%',\r\n        verticalAlign: 'middle',\r\n        marginRight: 20,\r\n    };\r\n\r\n    return (\r\n        <button {...props} className={className} type=\"button\">\r\n            <span><img alt=\"\" style={imgStyle} width=\"32\" height=\"32\" src={option.photo} /><span>{option.name}</span></span>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default function GeneralStatsCountries({setGeneralCases, countriesTotal, setHistoryCases, API, showFullDetails, setShowFullDetails}){\r\n    const [country,setCountry] = useState('Global');\r\n    const [countries,setCountries] = useState([]);\r\n    const [generalStats,setGeneralStats] = useState({});\r\n    useEffect(() => {\r\n        if(countriesTotal.length > 0){\r\n            let countriesD = [];\r\n            countriesTotal.map(item => {\r\n                countriesD.push({\r\n                    name : item.country,\r\n                    value : item.country,\r\n                    photo : item.countryInfo.flag,\r\n                })\r\n            });\r\n            setCountries(countriesD);\r\n            console.log(countries,countriesTotal)\r\n        }\r\n    }, [countriesTotal])\r\n\r\n    useEffect(() => {\r\n        let cn = countriesTotal.filter(i => {\r\n            return i.country == country;\r\n        })[0];\r\n\r\n        if(cn){\r\n            setGeneralStats(cn);\r\n            setGeneralCases(cn);\r\n        }\r\n\r\n        axios.get(country == 'Global' ? API.HISTORY_CASES : API.HISTORY_CASES_COUNTRY + country+'?lastdays=30')\r\n        .then(r => {\r\n            if(r.data.timeline){\r\n                setHistoryCases(r.data.timeline);\r\n            }else{\r\n                setHistoryCases(r.data);\r\n            }\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n\r\n    }, [country,countriesTotal])\r\n\r\n    return(\r\n        <Paper id=\"GeneralStatsCountries\">\r\n            <PaperOptions ID=\"GeneralStatsCountries\" />\r\n            <Grid container spacing={2}>\r\n\r\n                <Grid item md={3} xs={12}>\r\n                    <h3>Select Country Of Stats</h3>\r\n                    <SelectSearch\r\n                        name=\"countries\"\r\n                        className=\"select-search-box\"\r\n                        value={country}\r\n                        onChange={(value) => setCountry(value)}\r\n                        options={countries}\r\n                        placeholder=\"Search Country\"\r\n                        renderOption={renderCountry}\r\n                        search\r\n                    />\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                checked={showFullDetails}\r\n                                onChange={(event) => {setShowFullDetails(event.target.checked)}}\r\n                                name=\"checkedB\"\r\n                                color=\"primary\"\r\n                            />\r\n                        }\r\n                        label=\"Show Full Details\"\r\n                        data-tip=\"Show Full Details Of Selected Country\"\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item md={3} xs={12}>\r\n                    <Paper>\r\n                        <div className=\"box cases\">\r\n                            <span className=\"number\">\r\n                                {generalStats.cases ? generalStats.cases.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : '000'}\r\n                            </span>\r\n                            <span className=\"name\">\r\n                                Cases\r\n                            </span>\r\n                        </div>\r\n                    </Paper>\r\n                </Grid>\r\n                \r\n                <Grid item md={3} xs={12}>\r\n                    <Paper>\r\n                        <div className=\"box recovered\">\r\n                            <span className=\"number\">\r\n                                {generalStats.recovered ? generalStats.recovered.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : '000'}\r\n                            </span>\r\n                            <span className=\"name\">\r\n                                Recovered\r\n                            </span>\r\n                        </div>\r\n                    </Paper>\r\n                </Grid>\r\n\r\n                <Grid item md={3} xs={12}>\r\n                    <Paper>\r\n                        <div className=\"box deaths\">\r\n                            <span className=\"number\">\r\n                                {generalStats.deaths ? generalStats.deaths.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : '000'}\r\n                            </span>\r\n                            <span className=\"name\">\r\n                                Deaths\r\n                            </span>\r\n                        </div>\r\n                    </Paper>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </Paper>\r\n    ) \r\n}","import React, {memo} from 'react'\r\nimport { scaleLinear } from \"d3-scale\";\r\nimport {\r\n    ZoomableGroup,\r\n    ComposableMap,\r\n    Geographies,\r\n    Geography\r\n  } from \"react-simple-maps\";\r\nimport {Paper} from '@material-ui/core';\r\nimport PaperOptions from './PaperOptions'\r\n\r\nconst geoUrl = require('./../Caches/worldMap.json');\r\n\r\nconst colorScale = scaleLinear()\r\n    .domain([0, 50, 200, 500 , 1000,1000000000])\r\n    .range([\"#D2E3FC\", '#8AB4F8', '#4285F4' , '#1967D2' , \"#174EA6\", \"#174EA6\"]);\r\n\r\nconst CountriesCasesMap = ({ setTooltipContent, countriesTotal }) => {\r\n    return (\r\n      <div className=\"CountriesCasesMap\">\r\n            <h1 className=\"text-center\">Countries Cases Map</h1>\r\n            <Paper id=\"CountriesCasesMap\">\r\n                <PaperOptions ID=\"CountriesCasesMap\" />\r\n                <ComposableMap data-tip=\"\" projectionConfig={{ scale: 180 }}>\r\n                    <ZoomableGroup>\r\n                        <Geographies geography={geoUrl}>\r\n                        {({ geographies }) =>\r\n                            geographies.map((geo) => {\r\n                                const { NAME, ISO_A2 , ISO_A3} = geo.properties;\r\n                                let country = countriesTotal.filter(item => {\r\n                                    return item.country == NAME || item.countryInfo.iso2 == ISO_A2 || item.countryInfo.iso3 == ISO_A3;\r\n                                });\r\n                                return(\r\n                                    <Geography\r\n                                        key={geo.rsmKey}\r\n                                        geography={geo}\r\n                                        onMouseEnter={() => {\r\n                                            country = countriesTotal.filter(item => {\r\n                                                return item.country == NAME || item.countryInfo.iso2 == ISO_A2 || item.countryInfo.iso3 == ISO_A3;\r\n                                            });\r\n                                            if(country.length > 0){\r\n                                                country = country[0];\r\n                                                setTooltipContent((\r\n                                                <span>\r\n                                                    {NAME} \r\n                                                    <br /> Total Cases : {country.cases} \r\n                                                    <br /> Total Deaths : {country.deaths} \r\n                                                    <br /> Total Recovered : {country.recovered} \r\n                                                    <br /> Today Cases : {country.todayCases} \r\n                                                    <br /> Today Deaths : {country.todayDeaths} \r\n                                                    <br /> Tests : {country.tests} \r\n                                                    <br /> Active Cases : {country.active} \r\n                                                    <br /> Critical Cases : {country.critical} \r\n                                                    <br /> Cases Per One Million : {country.casesPerOneMillion} \r\n                                                    <br /> Deaths Per One Million : {country.deathsPerOneMillion} \r\n                                                    <br /> Tests Per One Million : {country.testsPerOneMillion} \r\n                                                </span> \r\n                                                ));\r\n                                            }else{\r\n                                                setTooltipContent((\r\n                                                    <span>\r\n                                                        {NAME} \r\n                                                    </span> \r\n                                                )); \r\n                                            }\r\n                                        }}\r\n                                        onMouseLeave={() => {\r\n                                            setTooltipContent(\"\");\r\n                                        }}\r\n                                        stroke=\"#D6D6DA\"\r\n                                        style={{\r\n                                            hover: {\r\n                                                fill: \"#F53\",\r\n                                                outline: \"none\"\r\n                                            },\r\n                                            pressed: {\r\n                                                fill: \"#E42\",\r\n                                                outline: \"none\"\r\n                                            }\r\n                                        }}\r\n                                        fill={country.length > 0 ? colorScale(country[0].casesPerOneMillion) : \"#D2E3FC\"}\r\n                                    />\r\n                                )\r\n                            })\r\n                        }\r\n                        </Geographies>\r\n                    </ZoomableGroup>\r\n                </ComposableMap>\r\n            </Paper>\r\n      </div>\r\n    );\r\n};\r\n  \r\n  export default memo(CountriesCasesMap);","import React, {useState, useEffect} from 'react'\r\nimport './../Sass/Home.scss'\r\n\r\nimport {Container, LinearProgress} from '@material-ui/core';\r\n\r\nimport axios from 'axios'\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nimport CasesByCountryTable from './../Components/CasesByCountryTable'\r\nimport GeneralCases from './../Components/GeneralCases'\r\nimport GeneralStatsCountries from './../Components/GeneralStatsCountries'\r\nimport CountriesCasesMap from './../Components/CountriesCasesMap'\r\n\r\nimport header_background from './../images/header_background.jpg'\r\n\r\nconst Home = ({API}) => {\r\n    // auto refresh data time\r\n    const waitTime = 180;\r\n\r\n    const getColorForPercentage = function(pct) {\r\n        if(pct == 0){\r\n            return 'green';\r\n        }\r\n        return `rgba(255, 0, 0, ${(pct/100) + 0.3})`;\r\n    };\r\n\r\n\r\n    const[countriesTotal, setCountriesTotal] = useState([]);\r\n    const[generalCases, setGeneralCases] = useState([]);\r\n    const[historyCases, setHistoryCases] = useState([]);\r\n    const[mapToolTipContent, setMapTooltipContent] = useState(\"\");\r\n    const[showFullDetails,setShowFullDetails] = useState(false);\r\n\r\n    const getCountriesData = () => {\r\n        axios.get(API.GENERAL_CASES)\r\n        .then(r => {\r\n            setGeneralCases(r.data);\r\n            axios.get(API.COUNTRIES_TOTAL)\r\n            .then(e => {\r\n                // const highest = r.data[0].cases;\r\n                // let withColors = [];\r\n                // r.data.map(item => {\r\n                //     let percent = ((item.cases / highest) * 100);\r\n                //     let d = item;\r\n                //     d.percent = percent;\r\n                //     let cc = getColorForPercentage(percent)\r\n                //     d.color = cc;\r\n                //     withColors.push(d);\r\n                //     return d;\r\n                // });\r\n                e.data.unshift({\r\n                    country : 'Global',\r\n                    countryInfo : {\r\n                        \"iso2\": \"GW\",\r\n                        \"iso3\": \"GW\",\r\n                        flag : 'http://clipart-library.com/images_k/globe-png-transparent/globe-png-transparent-23.png',\r\n                    },\r\n                    ...r.data\r\n                });\r\n\r\n                setCountriesTotal(e.data);\r\n\r\n\r\n                axios.get(API.HISTORY_CASES)\r\n                .then(v => {\r\n                    setHistoryCases(v.data);\r\n                }).catch(e => {\r\n                    console.log(e);\r\n                });\r\n\r\n            }).catch(ee => {\r\n                console.log(ee);\r\n            });\r\n\r\n        }).catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        // auto update\r\n        getCountriesData();\r\n        setInterval(() => {\r\n            getCountriesData();\r\n        }, waitTime * 1000)\r\n    }, []);\r\n\r\n    const loadingProgress = countriesTotal.length < 1 || generalCases.length < 1 || historyCases.length < 1  ? <LinearProgress className=\"progress\" /> : '';\r\n\r\n    return(\r\n        <div id=\"Home\">  \r\n            {loadingProgress}\r\n            <h1 className=\"text-center homePageHeader\" style={{\r\n                background : `url(${header_background}) fixed no-repeat center center`,\r\n                backgroundSize : 'cover'\r\n            }}><span>Covid-19 Online Updates</span></h1>\r\n\r\n            <Container maxWidth=\"lg\">\r\n                <GeneralStatsCountries setGeneralCases={setGeneralCases} showFullDetails={showFullDetails} setShowFullDetails={setShowFullDetails} countriesTotal={countriesTotal} setHistoryCases={setHistoryCases} API={API} />\r\n                <GeneralCases generalCases={generalCases} showFullDetails={showFullDetails} historyCases={historyCases} />\r\n                <CountriesCasesMap setTooltipContent={setMapTooltipContent} countriesTotal={countriesTotal} />\r\n                <ReactTooltip>{mapToolTipContent}</ReactTooltip>\r\n                <CasesByCountryTable countriesTotal={countriesTotal} />\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react'\r\nimport './../Sass/Footer.scss'\r\n\r\nimport {Container, Paper} from '@material-ui/core';\r\nimport {Favorite} from '@material-ui/icons';\r\n\r\n\r\nconst Footer = () => {\r\n\r\n\r\n    return(\r\n        <div id=\"Footer\">  \r\n            <Container maxWidth=\"lg\">\r\n                <Paper className=\"paper\">\r\n                    <span className=\"may-with\">This Website Made With {<Favorite color=\"secondary\" />} By</span> \r\n                    <a href=\"https://github.com/bishoyromany/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"creator\">Bishoy Romany</a>\r\n                </Paper>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './Sass/App.scss';\n\n// pages\nimport Home from './Pages/Home'\nimport Footer from './Components/Footer'\nfunction App() {\n  const dev = false;\n\n  let config;\n  const base = '/covid-statics';\n\n  if(dev){\n    config = {\n      'API' : {\n        'COUNTRIES_TOTAL' : 'http://localhost/covid-statics/src/Caches/countries.json',\n        'GENERAL_CASES' : 'http://localhost/covid-statics/src/Caches/all.json',\n        'HISTORY_CASES' : 'http://localhost/covid-statics/src/Caches/history.json',\n        'HISTORY_CASES_COUNTRY' : 'https://corona.lmao.ninja/v2/historical/',\n      }\n    };\n  }else{\n    config = {\n      'API' : {\n        'COUNTRIES_TOTAL' : 'https://corona.lmao.ninja/countries',\n        'GENERAL_CASES' : 'https://corona.lmao.ninja/all',\n        'HISTORY_CASES' : 'https://corona.lmao.ninja/v2/historical/all?lastdays=30',\n        'HISTORY_CASES_COUNTRY' : 'https://corona.lmao.ninja/v2/historical/',\n      }\n    };\n  }\n\n\n\n  return (\n    <Router basename={base}>\n      <div>\n        <Switch>\n          <Route path=\"/\">\n            <Home API={config.API} />\n          </Route>\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}